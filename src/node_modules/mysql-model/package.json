{
  "author": {
    "name": "Michal Kowalkowski",
    "email": "kowalkowski.michal@gmail.com"
  },
  "name": "mysql-model",
  "version": "0.0.2",
  "description": "A backbone based model for communicating with a MySQL database using felixge/node-mysql.",
  "main": "./mysql-model.js",
  "scripts": {
    "test": "make test"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/michalkow/node-mysql-model.git"
  },
  "keywords": [
    "node",
    "mysql",
    "model",
    "models",
    "orm",
    "backbone",
    "node-mysql",
    "database"
  ],
  "devDependencies": {
    "backbone": "0.9.2",
    "mysql": "2.0.0-alpha3",
    "underscore": "1.4.2"
  },
  "license": "MIT",
  "readme": "node-mysql-model\r\n========\r\nA [backbone](http://backbonejs.org) based model for communicating with a MySQL database using [felixge/node-mysql](https://github.com/felixge/node-mysql).\r\n\r\nInstall\r\n--------\r\n\r\nInstall from npm package:\r\n\r\n```bash\r\nnpm install mysql-model\r\n```\r\n\r\nOr install from git:\r\n\r\n```bash\r\nnpm install git://github.com/michalkow/node-mysql-model.git\r\n```\r\n\r\nUsage\r\n--------\r\n\r\nAdd the mysql-model module to your application :\r\n\r\n```javascript\r\nvar mysqlModel = require('mysql-model');\r\n```\r\n  \t\t\t\r\nThen create a model that will be main one for your application (all others will extend it):\r\n\r\n```javascript\r\nvar MyAppModel = mysqlModel.createConnection({\r\n  host     : 'database-host',\r\n  user     : 'database-user',\r\n  password : 'database-password',\r\n  database : 'database-name',\r\n});\r\n\r\nvar Movie = MyAppModel.extend({\r\n\ttableName: \"movies\",\r\n});\r\n\r\nmovie = new Movie();\r\n\r\n// OR\r\n\r\nmovie = new MyAppModel({tableName: \"movies\"});\r\n```\t\t\r\n\t\r\nTo see complete list of options for creating a connection with the database visit [felixge/node-mysql](https://github.com/felixge/node-mysql#connection-options) readme. \t\r\n\r\nAPI\r\n--------\r\n**Model Settable Options**\r\n\r\n>tableName\r\n\r\nName of a MySQL table the model will refer to:\r\n\r\n```javascript\r\nvar Movie = MyAppModel.extend({\r\n\ttableName: \"movies\",\r\n});\r\n```\t\r\n\r\n**Methods**\r\n\r\n> find\r\n\r\n\r\n*Retrieves records from database*\r\n\r\nUsage:\r\n\r\n```javascript\r\nmovie.find();\r\nmovie.find(method);\r\nmovie.find(callback);\r\nmovie.find(method, conditions);\r\nmovie.find(method, callback);\r\nmovie.find(method, conditions, callback);\r\n```\t\t\r\nParameters:\r\n\r\n- *string* **method**: uses one of find methods\r\n- *object* **conditions**: set find conditions\r\n- *function* **callback**: returns errors and results\r\n\r\nExample:\r\n\r\n```javascript\r\nmovie.find('all', {where: \"year > 2001\"}, function(err, rows, fields) {\r\n\t// Do something...\r\n});\r\n```\t\t\r\n\r\n> save\r\n\r\n*Saves your model to database*\r\n\r\nUsage:\r\n\r\n```javascript\r\nmovie.save();\r\nmovie.save(where);\r\nmovie.save(callback);\r\nmovie.save(where, callback);\r\n```\t\r\nParameters:\r\n\r\n- *string* **where**: set condition for WHERE\r\n- *function* **callback**: returns errors and results\r\n\r\nExample:\r\n\r\n```javascript\r\nmovie = new Movie({\r\n\tname: 'Serenity',\r\n\tdirector: 'Joss Whedon',\r\n\tlanguage: 'English',\r\n\tyear: 2005\r\n});\r\n// Will create new record\r\nmovie.save();\r\nmovie.set('id', 4);\r\n// Will update record if id exists\r\nmovie.save();\r\n```\t\t\r\n\r\n> remove\r\n\r\n*Deletes your model from database and unsets it*\r\n\r\nUsage:\r\n\r\n```javascript\r\nmovie.remove();\r\nmovie.remove(where);\r\nmovie.remove(callback);\r\nmovie.remove(where, callback);\r\n```\t\r\nParameters:\r\n\r\n- *string* **where**: set condition for WHERE\r\n- *function* **callback**: returns errors and results\r\n\r\nExample:\r\n\r\n```javascript\r\n// Will delete record from database matching id model\r\nmovie.set('id', 8);\r\nmovie.remove();\r\n// Will delete records from database matching where condition\r\nmovie.remove('year < 1980');\r\n```\t\r\n\r\n> read\r\n\r\n*Retrieves record from database and set it to current model*\r\n\r\nUsage:\r\n\r\n```javascript\r\nmovie.read();\r\nmovie.read(id);\r\nmovie.read(callback);\r\nmovie.read(id, callback);\r\n```\t\r\n\r\nParameters:\r\n\r\n- *integer* **id**: Id of record to read\r\n- *function* **callback**: returns errors and results\r\n\r\nExample:\r\n\r\n```javascript\r\nmovie.set('id', 6);\r\nmovie.read();\r\n// or\r\nmovie.read(6);\r\n```\t\r\n\r\n> query\r\n\r\n*Runs custom query*\r\n\r\nUsage:\r\n\r\n```javascript\r\nmovie.query(query);\r\nmovie.query(query, callback);\r\n```\t\r\nParameters:\r\n\r\n- *string* **query**: Your custom sql query to run \r\n- *function* **callback**: returns errors and results\r\n\r\nExample:\r\n\r\n```javascript\r\nmovie.query(\"SELECT name FROM movies WHERE director = 'James Cameron' ORDER BY year\", function(err, rows, fields) {\r\n\t// Do something...\r\n});\r\n```\t\r\n\r\n> setSQL\r\n\r\n*Method to replace 'set', when setting results passed back by node-mysql*\r\n\r\nUsage:\r\n\r\n```javascript\r\nmovie.setSQL(result);\r\n```\t\r\nParameters:\r\n\r\n- *object* **result**: Results passed back by find or read\r\n\r\nExample:\r\n\r\n```javascript\r\nmovie.find('first', {where: \"id=12\"}, function(err, row) {\r\n\tmovie.setSQL(row);\r\n});\r\n```\t\r\n\r\n**'find' methods**\r\n\r\n> 'all'\r\n\r\n*Returns all the records matching conditions*\r\n\r\nReturns:\r\n\r\n- array\r\n\r\nExample:\r\n\r\n```javascript\r\nmovie.find('all', {where: \"language = 'German'\", limit: [0, 30]}, function(err, rows) {\r\n\tfor(var i=0; i<rows.length; i++) {\r\n\t\tconsole.log(rows[i]);\r\n\t}\r\n});\r\n```\t\r\n\r\n> 'count'\r\n\r\n*Returns number of records matching conditions*\r\n\r\nReturns:\r\n\r\n- integer\r\n\r\nExample:\r\n\r\n```javascript\r\nmovie.find('count', {where: \"year = 2012\"}, function(err, result) {\r\n\t\tconsole.log(result);\r\n});\r\n```\t\r\n\r\n> 'first'\r\n\r\n*Returns first the records matching conditions*\r\n\r\nReturns:\r\n\r\n- object (hash)\r\n\r\nExample:\r\n\r\n```javascript\r\nmovie.find('first', {where: \"id = 3\"}, function(err, row) {\r\n\t\tconsole.log(row);\r\n});\r\n```\t\r\n \r\n> 'field'\r\n\r\n*Returns field of the first record matching conditions*\r\n\r\nReturns:\r\n\r\n- depends on field type\r\n\r\nExample:\r\n\r\n```javascript\r\nmovie.find('field', {fields: ['name'], where: \"id = 3\"}, function(err, field) {\r\n\t\tconsole.log(field);\r\n});\r\n```\t\r\n\r\n**'find' conditions**\r\n\r\n> fields\r\n\r\n*Fields to select from the table*\r\n\r\nAccepts:\r\n\r\n- array\r\n- string\r\n\r\nExample:\r\n\r\n```javascript\r\nmovie.find('all', {fields: ['id', 'name', 'year']});\r\n// SELECT id, name, year FROM movies\r\nmovie.find('all', {fields: \"name\"});\r\n// SELECT name FROM movies\r\n```\t\r\n\r\n> where\r\n\r\n*Operators for MySQL WHERE clause.*\r\n\r\nAccepts:\r\n\r\n- string\r\n\r\nExample:\r\n\r\n```javascript\r\nmovie.find('all', {where: \"year > 1987\"});\r\n// SELECT * FROM movies WHERE year > 1987\r\n```\t\r\n\r\n> group\r\n\r\n*Operators for MySQL GROUP BY clause.*\r\n\r\nAccepts:\r\n\r\n- array\r\n- string\r\n\r\nExample:\r\n\r\n```javascript\r\nmovie.find('all', {group: ['year', 'name']});\r\n// SELECT * FROM movies GROUP BY year, name\r\nmovie.find('all', {group: \"name\"});\r\n// SELECT * FROM movies GROUP BY name\r\n```\t\r\n\r\n> groupDESC\r\n\r\n*If true, sets descending order for GROUP BY*\r\n\r\nAccepts:\r\n\r\n- boolean\r\n\r\nExample:\r\n\r\n```javascript\r\nmovie.find('all', {group: ['year', 'name'], groupDESC:true});\r\n// SELECT * FROM movies GROUP BY year, name DESC\r\n```\t\r\n\r\n> having\r\n\r\n*Operators for MySQL HAVING clause.*\r\n\r\nAccepts:\r\n\r\n- string\r\n\r\nExample:\r\n\r\n```javascript\r\nmovie.find('all', {fields: ['name', 'COUNT(name)'], group: \"name\", having: \"COUNT(name) = 1\"});\r\n// SELECT name, COUNT(name) FROM movies GROUP BY name HAVING COUNT(name) = 1\r\n```\r\n\r\n> order\r\n\r\n*Operators for MySQL ORDER BY clause.*\r\n\r\nAccepts:\r\n\r\n- array\r\n- string\r\n\r\nExample:\r\n\r\n```javascript\r\nmovie.find('all', {group: ['year', 'name']});\r\n// SELECT * FROM movies ORDER BY year, name\r\nmovie.find('all', {group: \"name\"});\r\n// SELECT * FROM movies ORDER BY name\r\n```\t\r\n\r\n> orderDESC\r\n\r\n*If true, sets descending order for ORDER BY*\r\n\r\nAccepts:\r\n\r\n- boolean\r\n\r\nExample:\r\n\r\n```javascript\r\nmovie.find('all', {group: ['year', 'name'], orderDESC:true});\r\n// SELECT * FROM movies ORDER BY year, name DESC\r\n```\t\r\n\r\n> limit\r\n\r\n*Operators for MySQL LIMIT clause.*\r\n\r\nAccepts:\r\n\r\n- array\r\n- string\r\n\r\nExample:\r\n\r\n```javascript\r\nmovie.find('all', {limit: [0, 30]});\r\n// SELECT * FROM movies LIMIT 0, 30\r\nmovie.find('all', {limit: \"10, 40\"});\r\n// SELECT * FROM movies LIMIT 10, 40\r\n```\t\r\n\r\nTodo\r\n-------\r\n- validation\r\n- relations\r\n\t\t\t\t\r\nLicense\r\n-------\r\nnode-mysql-model is released under [MIT license](http://opensource.org/licenses/mit-license.php).\r\n\r\nCredits\r\n-------\r\nnode-mysql-model was created by [Micha≈Ç Kowalkowski](https://github.com/michalkow). You can contact me at [kowalkowski.michal@gmail.com](mailto:kowalkowski.michal@gmail.com)\r\n",
  "readmeFilename": "README.md",
  "_id": "mysql-model@0.0.2",
  "dist": {
    "shasum": "29df16bf435e873f5d7dc58494e6f6a5e675900b",
    "tarball": "https://registry.npmjs.org/mysql-model/-/mysql-model-0.0.2.tgz"
  },
  "_npmVersion": "1.2.0",
  "_npmUser": {
    "name": "reion",
    "email": "kowalkowski.michal@gmail.com"
  },
  "maintainers": [
    {
      "name": "reion",
      "email": "kowalkowski.michal@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "29df16bf435e873f5d7dc58494e6f6a5e675900b",
  "_resolved": "https://registry.npmjs.org/mysql-model/-/mysql-model-0.0.2.tgz",
  "_from": "mysql-model@latest",
  "bugs": {
    "url": "https://github.com/michalkow/node-mysql-model/issues"
  },
  "homepage": "https://github.com/michalkow/node-mysql-model#readme"
}
